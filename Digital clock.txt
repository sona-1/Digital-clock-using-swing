package com.practice;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.*;

public class MyWindow extends JFrame
{
	private JLabel heading;
	
	private JLabel clockLabel;
	
	private Font font=new Font(" ",Font.BOLD,35);
	
	
    MyWindow()
    {
    	super.setTitle("My Clock");
    	super.setSize(400,400);
    	super.setLocation(300,50);
    	this.createGUI();
    	this.startClock();
    	super.setVisible(true);
    	
    }
    
    public void createGUI()
    {
    	//gui
    	
    	heading=new JLabel("My Clock");
    	
    	clockLabel=new JLabel("clock");
    	heading.setFont(font);
    	clockLabel.setFont(font);
    	
    	this.setLayout(new GridLayout(2,1));
    	this.add(heading);
    	this.add(clockLabel);
    	
    }
    
    public void startClock()
    {
    	//Method-1)using timer class
    	/*Timer timer=new Timer(1000,new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {	
    			//String dateTime=new Date().toString(); //foreign time with IST
    			
    			String dateTime=new Date().toLocaleString(); //India time with Am and Pm
    			
    			Date d=new Date();
    			//SimpleDateFormat sdf=new SimpleDateFormat("hh :mm : ss"); // India time with [11:15:05]
    					
    			//String dateTime=sdf.format(d);
    			
    			clockLabel.setText(dateTime);
    		}
    	});
    	timer.start(); */
    
    	
    //Method-2) Using Thread class
    	Thread t=new Thread(){	
    		public void run()
    		{
    			try
    			{
    				while(true)
    				{
    					
    					Date d=new Date();
    	    			SimpleDateFormat sdf=new SimpleDateFormat("hh : mm : ss  a"); // India time with [11:15:05]
    	    					
    	    			String dateTime=sdf.format(d);
    	    			
    	    			clockLabel.setText(dateTime);
    	    			
    	    			//Thread.sleep(1000);
    	    			
    	    			Thread.currentThread().sleep(1000);
    				}
    			}catch(InterruptedException e)
    			{
    				e.printStackTrace();
    			}
    		}	
    	};
    	t.start();
    }
    
    
}
